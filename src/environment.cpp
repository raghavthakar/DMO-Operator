#include "environment.h"
#include "MORover.h"
#include <iostream>
#include <fstream>
#include <limits>
#include <yaml-cpp/yaml.h>

void Environment::loadConfig(const std::string& filename) {
    this->rover_env.loadConfig(filename);
}

// compute the rewards generated by the provided agents configuration
std::vector<int> Environment::getRewards(std::vector<std::pair<double, double>> agentPositions,
                                        int stepNumber) {
    return this->rover_env.getRewards(agentPositions, stepNumber);
}

// take in an agent's position and return new position based on environmental limits
std::pair<double, double> Environment::moveAgent(std::pair<double, double> currentPos, std::pair<double, double> delta, double maxStepSize) {
    return this->rover_env.moveAgent(currentPos, delta, maxStepSize);
}

// observations of an agent
std::vector<double> Environment::getAgentObservations(std::pair<double, double> agentPos, int numberOfSensors, double observationRadius, std::vector<std::pair<double, double>> agentPositions) {
    return this->rover_env.getAgentObservations(agentPos, numberOfSensors, observationRadius, agentPositions);
}

std::pair<int, int> Environment::getDimensions() {
    return this->rover_env.getDimensions();
}

void Environment::reset() {
    this->rover_env.reset();
}
